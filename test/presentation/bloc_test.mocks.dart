// Mocks generated by Mockito 5.4.2 from annotations
// in joke_gen_1/test/presentation/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:joke_gen_1/core/errors/failures.dart' as _i6;
import 'package:joke_gen_1/core/usecases/usecase.dart' as _i8;
import 'package:joke_gen_1/features/jokes/domain/entities/jokes.dart' as _i7;
import 'package:joke_gen_1/features/jokes/domain/repos_2/joke_repository.dart'
    as _i2;
import 'package:joke_gen_1/features/jokes/domain/usecases/get_random_joke.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJokeRepository_0 extends _i1.SmartFake
    implements _i2.JokeRepository {
  _FakeJokeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetJoke].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetJoke extends _i1.Mock implements _i4.GetJoke {
  MockGetJoke() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.JokeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeJokeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.JokeRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Joke>> call(_i8.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Joke>>.value(
            _FakeEither_1<_i6.Failure, _i7.Joke>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Joke>>);
}

/// A class which mocks [JokeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockJokeRepository extends _i1.Mock implements _i2.JokeRepository {
  MockJokeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Joke>> getRandomJoke() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRandomJoke,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Joke>>.value(
            _FakeEither_1<_i6.Failure, _i7.Joke>(
          this,
          Invocation.method(
            #getRandomJoke,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Joke>>);
}
